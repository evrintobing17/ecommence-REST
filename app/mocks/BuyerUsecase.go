// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	models "github.com/evrintobing17/ecommence-REST/app/models"
	mock "github.com/stretchr/testify/mock"
)

// BuyerUsecase is an autogenerated mock type for the BuyerUsecase type
type BuyerUsecase struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: userId
func (_m *BuyerUsecase) DeleteByID(userId int) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: email, password
func (_m *BuyerUsecase) Login(email string, password string) (*models.Buyer, string, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.Buyer
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Buyer, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Buyer); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Buyer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RefreshAccessJWT provides a mock function with given fields: userID
func (_m *BuyerUsecase) RefreshAccessJWT(userID int) (string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAccessJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: username, email, password, address
func (_m *BuyerUsecase) Register(username string, email string, password string, address string) (*models.Buyer, error) {
	ret := _m.Called(username, email, password, address)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*models.Buyer, error)); ok {
		return rf(username, email, password, address)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *models.Buyer); ok {
		r0 = rf(username, email, password, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Buyer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(username, email, password, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updateData
func (_m *BuyerUsecase) Update(updateData map[string]interface{}) (*models.Buyer, error) {
	ret := _m.Called(updateData)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Buyer
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (*models.Buyer, error)); ok {
		return rf(updateData)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *models.Buyer); ok {
		r0 = rf(updateData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Buyer)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBuyerUsecase creates a new instance of BuyerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuyerUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *BuyerUsecase {
	mock := &BuyerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
