// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	models "github.com/evrintobing17/ecommence-REST/app/models"
	mock "github.com/stretchr/testify/mock"
)

// SellerRepository is an autogenerated mock type for the SellerRepository type
type SellerRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userId
func (_m *SellerRepository) Delete(userId int) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistByEmail provides a mock function with given fields: email
func (_m *SellerRepository) ExistByEmail(email string) (bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ExistByEmail")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistByUsername provides a mock function with given fields: username
func (_m *SellerRepository) ExistByUsername(username string) (bool, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for ExistByUsername")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *SellerRepository) GetByEmail(email string) (*models.Seller, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *models.Seller
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Seller, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Seller); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Seller)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *SellerRepository) GetByID(id int) (*models.Seller, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Seller
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Seller, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Seller); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Seller)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: user
func (_m *SellerRepository) Insert(user models.Seller) (*models.Seller, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *models.Seller
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Seller) (*models.Seller, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.Seller) *models.Seller); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Seller)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Seller) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePartial provides a mock function with given fields: updateData
func (_m *SellerRepository) UpdatePartial(updateData map[string]interface{}) (*models.Seller, error) {
	ret := _m.Called(updateData)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePartial")
	}

	var r0 *models.Seller
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (*models.Seller, error)); ok {
		return rf(updateData)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *models.Seller); ok {
		r0 = rf(updateData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Seller)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSellerRepository creates a new instance of SellerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSellerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SellerRepository {
	mock := &SellerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
